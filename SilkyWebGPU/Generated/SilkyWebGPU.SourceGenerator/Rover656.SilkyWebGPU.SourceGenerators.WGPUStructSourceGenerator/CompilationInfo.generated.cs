// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.CompilationInfo"/>
public class CompilationInfo : ChainedStruct<Silk.NET.WebGPU.CompilationInfo>
{

    // Keep a copy around for disposal.
    private NativeArray<Silk.NET.WebGPU.CompilationMessage> _Messages;

    /// <seealso cref="Silk.NET.WebGPU.CompilationInfo.Messages" />
    /// <remarks>
    /// TODO: Write this remark.
    /// Summary: Will update if you modify the existing pointer, but if you replace it, it won't.
    /// </remarks>
    public unsafe NativeArray<Silk.NET.WebGPU.CompilationMessage> Messages
    {
        // Return a readonly weak copy.
        get => new NativeArray<Silk.NET.WebGPU.CompilationMessage>((uint) Native.MessageCount, Native.Messages);

        set
        {
            // Dispose any existing object.
            _Messages?.Dispose();

            // Allocate new chain -OR- set to default
            if (value != null)
            {
                Native.Messages = value.Ptr;
                Native.MessageCount = value.Count;
            }
            else
            {
                Native.Messages = null;
                Native.MessageCount = 0;
            }

            // Save for later disposal
            _Messages = value;
        }
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"CompilationInfo {{
}}";
    }

    public override unsafe void Dispose()
    {
        _Messages?.Dispose();
        _Messages = null;
        base.Dispose();
    }
}
