// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using System.Runtime.CompilerServices;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.TextureViewDescriptor"/>
public class TextureViewDescriptor : ChainedStruct<Silk.NET.WebGPU.TextureViewDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.TextureViewDescriptor.Label" />
    public unsafe string Label
    {
        get => SilkMarshal.PtrToString((nint) Native.Label);

        set
       {
           if (Native.Label != null)
               SilkMarshal.Free((nint) Native.Label);
           Native.Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureViewDescriptor.Format" />
    public Silk.NET.WebGPU.TextureFormat Format
    {
        get => Native.Format;
        set => Native.Format = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureViewDescriptor.Dimension" />
    public Silk.NET.WebGPU.TextureViewDimension Dimension
    {
        get => Native.Dimension;
        set => Native.Dimension = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureViewDescriptor.BaseMipLevel" />
    public uint BaseMipLevel
    {
        get => Native.BaseMipLevel;
        set => Native.BaseMipLevel = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureViewDescriptor.MipLevelCount" />
    public uint MipLevelCount
    {
        get => Native.MipLevelCount;
        set => Native.MipLevelCount = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureViewDescriptor.BaseArrayLayer" />
    public uint BaseArrayLayer
    {
        get => Native.BaseArrayLayer;
        set => Native.BaseArrayLayer = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureViewDescriptor.ArrayLayerCount" />
    public uint ArrayLayerCount
    {
        get => Native.ArrayLayerCount;
        set => Native.ArrayLayerCount = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureViewDescriptor.Aspect" />
    public Silk.NET.WebGPU.TextureAspect Aspect
    {
        get => Native.Aspect;
        set => Native.Aspect = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"TextureViewDescriptor {{
    Label = ""{Label}""
    Format = ""{Format}""
    Dimension = ""{Dimension}""
    BaseMipLevel = ""{BaseMipLevel}""
    MipLevelCount = ""{MipLevelCount}""
    BaseArrayLayer = ""{BaseArrayLayer}""
    ArrayLayerCount = ""{ArrayLayerCount}""
    Aspect = ""{Aspect}""
}}";
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.Label);
    }
}
