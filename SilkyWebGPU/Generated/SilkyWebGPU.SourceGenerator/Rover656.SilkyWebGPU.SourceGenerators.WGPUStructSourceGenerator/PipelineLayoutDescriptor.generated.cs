// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.PipelineLayoutDescriptor"/>
public class PipelineLayoutDescriptor : ChainedStruct<Silk.NET.WebGPU.PipelineLayoutDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.PipelineLayoutDescriptor.Label" />
    public unsafe string Label
    {
        get => SilkMarshal.PtrToString((nint) Native.Label);

        set
       {
           if (Native.Label != null)
               SilkMarshal.Free((nint) Native.Label);
           Native.Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    // Keep a copy around for disposal.
    private NativePtrArray<Silk.NET.WebGPU.BindGroupLayout> _BindGroupLayouts;

    /// <seealso cref="Silk.NET.WebGPU.PipelineLayoutDescriptor.BindGroupLayouts" />
    /// <remarks>
    /// TODO: Write this remark.
    /// Summary: Will update if you modify the existing pointer, but if you replace it, it won't.
    /// </remarks>
    public unsafe NativePtrArray<Silk.NET.WebGPU.BindGroupLayout> BindGroupLayouts
    {
        // Return a readonly weak copy.
        get => new NativePtrArray<Silk.NET.WebGPU.BindGroupLayout>((uint) Native.BindGroupLayoutCount, Native.BindGroupLayouts);

        set
        {
            // Dispose any existing object.
            _BindGroupLayouts?.Dispose();

            // Allocate new chain -OR- set to default
            if (value != null)
            {
                Native.BindGroupLayouts = value.Ptr;
                Native.BindGroupLayoutCount = value.Count;
            }
            else
            {
                Native.BindGroupLayouts = null;
                Native.BindGroupLayoutCount = 0;
            }

            // Save for later disposal
            _BindGroupLayouts = value;
        }
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"PipelineLayoutDescriptor {{
    Label = ""{Label}""
}}";
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.Label);
        Native.Label = null;
    }
}
