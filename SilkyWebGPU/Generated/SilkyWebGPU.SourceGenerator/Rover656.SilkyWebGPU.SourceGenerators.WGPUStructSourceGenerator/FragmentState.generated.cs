// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.FragmentState"/>
public class FragmentState : ChainedStruct<Silk.NET.WebGPU.FragmentState>
{

    /// <seealso cref="Silk.NET.WebGPU.FragmentState.Module" />
    public unsafe WebGPUPtr<Silk.NET.WebGPU.ShaderModule> Module
    {
        get => WebGPUPtr<Silk.NET.WebGPU.ShaderModule>.Weak(Native.Module);
        set => Native.Module = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.FragmentState.EntryPoint" />
    public unsafe string EntryPoint
    {
        get => SilkMarshal.PtrToString((nint) Native.EntryPoint);

        set
       {
           if (Native.EntryPoint != null)
               SilkMarshal.Free((nint) Native.EntryPoint);
           Native.EntryPoint = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <summary>
    /// This is a currently unsupported type.
    /// Native type: Silk.NET.WebGPU.ConstantEntry*.
    /// Original name: Constants.
    /// Is array type?: true.
    /// </summary>
    /// <seealso cref="Silk.NET.WebGPU.FragmentState.Constants" />
    public unsafe Silk.NET.WebGPU.ConstantEntry* Constants
    {
        get => Native.Constants;
        set => Native.Constants = value;
    }

    // Keep a copy around for disposal.
    private NativeChainableArray<Silk.NET.WebGPU.ColorTargetState> _Targets;

    /// <seealso cref="Silk.NET.WebGPU.FragmentState.Targets" />
    /// <remarks>
    /// TODO: Write this remark.
    /// Summary: Will update if you modify the existing pointer, but if you replace it, it won't.
    /// </remarks>
    public unsafe NativeChainableArray<Silk.NET.WebGPU.ColorTargetState> Targets
    {
        // Limitations do not permit this to work... yet.
        //get => Native.Targets;

        set
        {
            // Dispose any existing object.
            _Targets?.Dispose();

            // Allocate new chain -OR- set to default
            if (value != null)
            {
                Native.Targets = value.Ptr;
                Native.TargetCount = value.Count;
            }
            else
            {
                Native.Targets = null;
                Native.TargetCount = 0;
            }

            // Save for later disposal
            _Targets = value;
        }
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"FragmentState {{
    EntryPoint = ""{EntryPoint}""
}}";
    }

    public override unsafe void Dispose()
    {
        _Targets?.Dispose();
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.EntryPoint);
    }
}
