// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.ComputePassTimestampWrite"/>
public class ComputePassTimestampWrite : WrappedStruct<Silk.NET.WebGPU.ComputePassTimestampWrite>
{
    public static implicit operator ComputePassTimestampWrite(Silk.NET.WebGPU.ComputePassTimestampWrite native) {
        var ret = new ComputePassTimestampWrite();
        ret.Native = native;
        return ret;
    }

    /// <seealso cref="Silk.NET.WebGPU.ComputePassTimestampWrite.QuerySet" />
    public unsafe WebGPUPtr<Silk.NET.WebGPU.QuerySet> QuerySet
    {
        get => WebGPUPtr<Silk.NET.WebGPU.QuerySet>.Weak(Native.QuerySet);
        set => Native.QuerySet = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.ComputePassTimestampWrite.QueryIndex" />
    public uint QueryIndex
    {
        get => Native.QueryIndex;
        set => Native.QueryIndex = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.ComputePassTimestampWrite.Location" />
    public Silk.NET.WebGPU.ComputePassTimestampLocation Location
    {
        get => Native.Location;
        set => Native.Location = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"ComputePassTimestampWrite {{
    QueryIndex = ""{QueryIndex}""
    Location = ""{Location}""
}}";
    }
}
