// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry"/>
public class BindGroupLayoutEntry : ChainedStruct<Silk.NET.WebGPU.BindGroupLayoutEntry>
{

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Binding" />
    public uint Binding
    {
        get => Native.Binding;
        set => Native.Binding = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Visibility" />
    public Silk.NET.WebGPU.ShaderStage Visibility
    {
        get => Native.Visibility;
        set => Native.Visibility = value;
    }
 
    // Keep a copy around for disposal.
    private BufferBindingLayout _Buffer;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Buffer" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe BufferBindingLayout Buffer
    {
        // TODO: Due to limitations, these are only writeable for now... Use the Raw field instead for reading.
        //get => Native.Buffer;

        set
        {
            // Dispose any existing object.
            _Buffer?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Buffer);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Buffer = value.GetWithChain();
            else Native.Buffer = default;

            // Save
            _Buffer = value;
        }
    }
 
    // Keep a copy around for disposal.
    private SamplerBindingLayout _Sampler;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Sampler" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe SamplerBindingLayout Sampler
    {
        // TODO: Due to limitations, these are only writeable for now... Use the Raw field instead for reading.
        //get => Native.Sampler;

        set
        {
            // Dispose any existing object.
            _Sampler?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Sampler);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Sampler = value.GetWithChain();
            else Native.Sampler = default;

            // Save
            _Sampler = value;
        }
    }
 
    // Keep a copy around for disposal.
    private TextureBindingLayout _Texture;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Texture" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe TextureBindingLayout Texture
    {
        // TODO: Due to limitations, these are only writeable for now... Use the Raw field instead for reading.
        //get => Native.Texture;

        set
        {
            // Dispose any existing object.
            _Texture?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Texture);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Texture = value.GetWithChain();
            else Native.Texture = default;

            // Save
            _Texture = value;
        }
    }
 
    // Keep a copy around for disposal.
    private StorageTextureBindingLayout _StorageTexture;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.StorageTexture" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe StorageTextureBindingLayout StorageTexture
    {
        // TODO: Due to limitations, these are only writeable for now... Use the Raw field instead for reading.
        //get => Native.StorageTexture;

        set
        {
            // Dispose any existing object.
            _StorageTexture?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.StorageTexture);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.StorageTexture = value.GetWithChain();
            else Native.StorageTexture = default;

            // Save
            _StorageTexture = value;
        }
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"BindGroupLayoutEntry {{
    Binding = ""{Binding}""
    Visibility = ""{Visibility}""
}}";
    }

    public override unsafe void Dispose()
    {
        _Buffer?.Dispose();
        _Buffer = null;
        _Sampler?.Dispose();
        _Sampler = null;
        _Texture?.Dispose();
        _Texture = null;
        _StorageTexture?.Dispose();
        _StorageTexture = null;
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        ChainHelper.FreeChain(ref Native.Buffer);
        ChainHelper.FreeChain(ref Native.Sampler);
        ChainHelper.FreeChain(ref Native.Texture);
        ChainHelper.FreeChain(ref Native.StorageTexture);
    }
}
