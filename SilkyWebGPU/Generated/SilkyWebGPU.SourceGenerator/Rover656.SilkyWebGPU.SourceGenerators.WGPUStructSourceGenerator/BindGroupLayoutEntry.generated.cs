// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry"/>
public class BindGroupLayoutEntry : NewNewChainedStruct<Silk.NET.WebGPU.BindGroupLayoutEntry>
{

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Binding" />
    public uint Binding
    {
        get => Native.Binding;
        set => Native.Binding = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Visibility" />
    public Silk.NET.WebGPU.ShaderStage Visibility
    {
        get => Native.Visibility;
        set => Native.Visibility = value;
    }
 
    // Keep a copy around for disposal.
    private BufferBindingLayout _Buffer;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Buffer" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe BufferBindingLayout Buffer
    {
        get
        {
            // This hasn't been set.
            // A chainable will never be allocated on the library side, so it must be set from managed code before being fetched.
            if (_Buffer == null)
                return null;
            
            // Load the current native value back into the managed clone
            fixed (Silk.NET.WebGPU.BufferBindingLayout* native = &_Buffer.Native)
            {
                _Buffer.Update((ChainedStruct*) native);
            }

            // Return a clone (so modifications don't break this).
            return (BufferBindingLayout) _Buffer.Clone();
        }

        set
        {
            // Dispose any existing object.
            _Buffer?.Dispose();
            
            // Save a clone. This clone will manage its own memory separate to the value passed
            _Buffer = value != null ? (BufferBindingLayout) value.Clone() : null;

            // Dispose the value, it has been consumed
            value?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Buffer);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Buffer = value.Get();
            else Native.Buffer = default;
        }
    }
 
    // Keep a copy around for disposal.
    private SamplerBindingLayout _Sampler;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Sampler" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe SamplerBindingLayout Sampler
    {
        get
        {
            // This hasn't been set.
            // A chainable will never be allocated on the library side, so it must be set from managed code before being fetched.
            if (_Sampler == null)
                return null;
            
            // Load the current native value back into the managed clone
            fixed (Silk.NET.WebGPU.SamplerBindingLayout* native = &_Sampler.Native)
            {
                _Sampler.Update((ChainedStruct*) native);
            }

            // Return a clone (so modifications don't break this).
            return (SamplerBindingLayout) _Sampler.Clone();
        }

        set
        {
            // Dispose any existing object.
            _Sampler?.Dispose();
            
            // Save a clone. This clone will manage its own memory separate to the value passed
            _Sampler = value != null ? (SamplerBindingLayout) value.Clone() : null;

            // Dispose the value, it has been consumed
            value?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Sampler);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Sampler = value.Get();
            else Native.Sampler = default;
        }
    }
 
    // Keep a copy around for disposal.
    private TextureBindingLayout _Texture;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Texture" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe TextureBindingLayout Texture
    {
        get
        {
            // This hasn't been set.
            // A chainable will never be allocated on the library side, so it must be set from managed code before being fetched.
            if (_Texture == null)
                return null;
            
            // Load the current native value back into the managed clone
            fixed (Silk.NET.WebGPU.TextureBindingLayout* native = &_Texture.Native)
            {
                _Texture.Update((ChainedStruct*) native);
            }

            // Return a clone (so modifications don't break this).
            return (TextureBindingLayout) _Texture.Clone();
        }

        set
        {
            // Dispose any existing object.
            _Texture?.Dispose();
            
            // Save a clone. This clone will manage its own memory separate to the value passed
            _Texture = value != null ? (TextureBindingLayout) value.Clone() : null;

            // Dispose the value, it has been consumed
            value?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Texture);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Texture = value.Get();
            else Native.Texture = default;
        }
    }
 
    // Keep a copy around for disposal.
    private StorageTextureBindingLayout _StorageTexture;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.StorageTexture" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe StorageTextureBindingLayout StorageTexture
    {
        get
        {
            // This hasn't been set.
            // A chainable will never be allocated on the library side, so it must be set from managed code before being fetched.
            if (_StorageTexture == null)
                return null;
            
            // Load the current native value back into the managed clone
            fixed (Silk.NET.WebGPU.StorageTextureBindingLayout* native = &_StorageTexture.Native)
            {
                _StorageTexture.Update((ChainedStruct*) native);
            }

            // Return a clone (so modifications don't break this).
            return (StorageTextureBindingLayout) _StorageTexture.Clone();
        }

        set
        {
            // Dispose any existing object.
            _StorageTexture?.Dispose();
            
            // Save a clone. This clone will manage its own memory separate to the value passed
            _StorageTexture = value != null ? (StorageTextureBindingLayout) value.Clone() : null;

            // Dispose the value, it has been consumed
            value?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.StorageTexture);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.StorageTexture = value.Get();
            else Native.StorageTexture = default;
        }
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"BindGroupLayoutEntry {{
    Binding = ""{Binding}""
    Visibility = ""{Visibility}""
}}";
    }

    public override unsafe void Dispose()
    {
        _Buffer?.Dispose();
        _Buffer = null;
        _Sampler?.Dispose();
        _Sampler = null;
        _Texture?.Dispose();
        _Texture = null;
        _StorageTexture?.Dispose();
        _StorageTexture = null;
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        ChainHelper.FreeChain(ref Native.Buffer);
        ChainHelper.FreeChain(ref Native.Sampler);
        ChainHelper.FreeChain(ref Native.Texture);
        ChainHelper.FreeChain(ref Native.StorageTexture);
        base.ReleaseUnmanagedResources();
    }
    internal override BindGroupLayoutEntry Clone()
    {
        var clone = new BindGroupLayoutEntry();
        clone.Native = Native;
        clone.Next = Next;
        return clone;
    }
}
