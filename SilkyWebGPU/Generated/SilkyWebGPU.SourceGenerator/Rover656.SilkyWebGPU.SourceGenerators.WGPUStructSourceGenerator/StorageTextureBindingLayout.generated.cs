// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.StorageTextureBindingLayout"/>
public class StorageTextureBindingLayout : NewNewChainedStruct<Silk.NET.WebGPU.StorageTextureBindingLayout>
{

    /// <seealso cref="Silk.NET.WebGPU.StorageTextureBindingLayout.Access" />
    public Silk.NET.WebGPU.StorageTextureAccess Access
    {
        get => Native.Access;
        set => Native.Access = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.StorageTextureBindingLayout.Format" />
    public Silk.NET.WebGPU.TextureFormat Format
    {
        get => Native.Format;
        set => Native.Format = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.StorageTextureBindingLayout.ViewDimension" />
    public Silk.NET.WebGPU.TextureViewDimension ViewDimension
    {
        get => Native.ViewDimension;
        set => Native.ViewDimension = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"StorageTextureBindingLayout {{
    Access = ""{Access}""
    Format = ""{Format}""
    ViewDimension = ""{ViewDimension}""
}}";
    }
    internal override StorageTextureBindingLayout Clone()
    {
        var clone = new StorageTextureBindingLayout();
        clone.Native = Native;
        clone.Next = Next;
        return clone;
    }
}
