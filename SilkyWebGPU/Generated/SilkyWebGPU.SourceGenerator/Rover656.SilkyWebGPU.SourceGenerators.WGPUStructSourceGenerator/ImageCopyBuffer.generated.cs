// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.ImageCopyBuffer"/>
public class ImageCopyBuffer : ChainedStruct<Silk.NET.WebGPU.ImageCopyBuffer>
{

    // Keep a copy around for disposal.
    private TextureDataLayout _Layout;

    /// <seealso cref="Silk.NET.WebGPU.ImageCopyBuffer.Layout" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe TextureDataLayout Layout
    {
        // TODO: Due to limitations, these are only writeable for now... Use the Raw field instead for reading.
        //get => Native.Layout;

        set
        {
            // Dispose any existing object.
            _Layout?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Layout);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Layout = value.GetWithChain();
            else Native.Layout = default;

            // Save
            _Layout = value;
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.ImageCopyBuffer.Buffer" />
    public unsafe WebGPUPtr<Silk.NET.WebGPU.Buffer> Buffer
    {
        get => WebGPUPtr<Silk.NET.WebGPU.Buffer>.Weak(Native.Buffer);
        set => Native.Buffer = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"ImageCopyBuffer {{
}}";
    }

    public override unsafe void Dispose()
    {
        _Layout?.Dispose();
        _Layout = null;
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        ChainHelper.FreeChain(ref Native.Layout);
    }
}
