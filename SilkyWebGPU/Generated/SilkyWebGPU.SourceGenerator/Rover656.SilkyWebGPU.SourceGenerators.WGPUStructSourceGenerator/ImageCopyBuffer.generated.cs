// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.ImageCopyBuffer"/>
public class ImageCopyBuffer : NewNewChainedStruct<Silk.NET.WebGPU.ImageCopyBuffer>
{

    // Keep a copy around for disposal.
    private TextureDataLayout _Layout;

    /// <seealso cref="Silk.NET.WebGPU.ImageCopyBuffer.Layout" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe TextureDataLayout Layout
    {
        get
        {
            // This hasn't been set.
            // A chainable will never be allocated on the library side, so it must be set from managed code before being fetched.
            if (_Layout == null)
                return null;
            
            // Load the current native value back into the managed clone
            fixed (Silk.NET.WebGPU.TextureDataLayout* native = &_Layout.Native)
            {
                _Layout.Update((ChainedStruct*) native);
            }

            // Return a clone (so modifications don't break this).
            return (TextureDataLayout) _Layout.Clone();
        }

        set
        {
            // Dispose any existing object.
            _Layout?.Dispose();
            
            // Save a clone. This clone will manage its own memory separate to the value passed
            _Layout = value != null ? (TextureDataLayout) value.Clone() : null;

            // Dispose the value, it has been consumed
            value?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Layout);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Layout = value.Get();
            else Native.Layout = default;
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.ImageCopyBuffer.Buffer" />
    public unsafe WebGPUPtr<Silk.NET.WebGPU.Buffer> Buffer
    {
        get => WebGPUPtr<Silk.NET.WebGPU.Buffer>.Weak(Native.Buffer);
        set => Native.Buffer = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"ImageCopyBuffer {{
}}";
    }

    public override unsafe void Dispose()
    {
        _Layout?.Dispose();
        _Layout = null;
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        ChainHelper.FreeChain(ref Native.Layout);
        base.ReleaseUnmanagedResources();
    }
    internal override ImageCopyBuffer Clone()
    {
        var clone = new ImageCopyBuffer();
        clone.Native = Native;
        clone.Next = Next;
        return clone;
    }
}
