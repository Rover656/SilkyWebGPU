// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.TextureDescriptor"/>
public class ManagedTextureDescriptor : ChainedStruct<Silk.NET.WebGPU.TextureDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.TextureDescriptor.Label" />
    public unsafe string Label
    {
        get => SilkMarshal.PtrToString((nint) Native.Label);
        set
       {
           if (Native.Label != null)
               SilkMarshal.Free((nint) Native.Label);
           Native.Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureDescriptor.Usage" />
    public Silk.NET.WebGPU.TextureUsage Usage
    {
        get => Native.Usage;
        set => Native.Usage = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureDescriptor.Dimension" />
    public Silk.NET.WebGPU.TextureDimension Dimension
    {
        get => Native.Dimension;
        set => Native.Dimension = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureDescriptor.Size" />
    public Silk.NET.WebGPU.Extent3D Size
    {
        get => Native.Size;
        set => Native.Size = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureDescriptor.Format" />
    public Silk.NET.WebGPU.TextureFormat Format
    {
        get => Native.Format;
        set => Native.Format = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureDescriptor.MipLevelCount" />
    public uint MipLevelCount
    {
        get => Native.MipLevelCount;
        set => Native.MipLevelCount = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureDescriptor.SampleCount" />
    public uint SampleCount
    {
        get => Native.SampleCount;
        set => Native.SampleCount = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.TextureDescriptor.ViewFormatCount" />
    public uint ViewFormatCount
    {
        get => Native.ViewFormatCount;
        set => Native.ViewFormatCount = value;
    }
 
    /// <summary>
    /// This is a currently unsupported type.
    /// Native type: Silk.NET.WebGPU.TextureFormat*.
    /// Original name: ViewFormats.
    /// Is array type?: True.
    /// </summary>
    /// <seealso cref="Silk.NET.WebGPU.TextureDescriptor.ViewFormats" />
    public unsafe Silk.NET.WebGPU.TextureFormat* ViewFormats
    {
        get => Native.ViewFormats;
        set => Native.ViewFormats = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"TextureDescriptor {{
    Label = ""{Label}""
    Usage = ""{Usage}""
    Dimension = ""{Dimension}""
    Size = ""{Size}""
    Format = ""{Format}""
    MipLevelCount = ""{MipLevelCount}""
    SampleCount = ""{SampleCount}""
    ViewFormatCount = ""{ViewFormatCount}""
}}";
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.Label);
    }
}
