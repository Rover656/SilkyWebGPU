// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.BindGroupEntry"/>
public class BindGroupEntry : NewNewChainedStruct<Silk.NET.WebGPU.BindGroupEntry>
{

    /// <seealso cref="Silk.NET.WebGPU.BindGroupEntry.Binding" />
    public uint Binding
    {
        get => Native.Binding;
        set => Native.Binding = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.BindGroupEntry.Buffer" />
    public unsafe WebGPUPtr<Silk.NET.WebGPU.Buffer> Buffer
    {
        get => WebGPUPtr<Silk.NET.WebGPU.Buffer>.Weak(Native.Buffer);
        set => Native.Buffer = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.BindGroupEntry.Offset" />
    public ulong Offset
    {
        get => Native.Offset;
        set => Native.Offset = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.BindGroupEntry.Size" />
    public ulong Size
    {
        get => Native.Size;
        set => Native.Size = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.BindGroupEntry.Sampler" />
    public unsafe WebGPUPtr<Silk.NET.WebGPU.Sampler> Sampler
    {
        get => WebGPUPtr<Silk.NET.WebGPU.Sampler>.Weak(Native.Sampler);
        set => Native.Sampler = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.BindGroupEntry.TextureView" />
    public unsafe WebGPUPtr<Silk.NET.WebGPU.TextureView> TextureView
    {
        get => WebGPUPtr<Silk.NET.WebGPU.TextureView>.Weak(Native.TextureView);
        set => Native.TextureView = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"BindGroupEntry {{
    Binding = ""{Binding}""
    Offset = ""{Offset}""
    Size = ""{Size}""
}}";
    }
    internal override BindGroupEntry Clone()
    {
        var clone = new BindGroupEntry();
        clone.Native = Native;
        clone.Next = Next;
        return clone;
    }
}
