// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using System.Runtime.CompilerServices;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.ProgrammableStageDescriptor"/>
public class ProgrammableStageDescriptor : ChainedStruct<Silk.NET.WebGPU.ProgrammableStageDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.ProgrammableStageDescriptor.Module" />
    public unsafe WebGPUPtr<Silk.NET.WebGPU.ShaderModule> Module
    {
        get => WebGPUPtr<Silk.NET.WebGPU.ShaderModule>.Weak(Native.Module);
        set => Native.Module = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.ProgrammableStageDescriptor.EntryPoint" />
    public unsafe string EntryPoint
    {
        get => SilkMarshal.PtrToString((nint) Native.EntryPoint);

        set
       {
           if (Native.EntryPoint != null)
               SilkMarshal.Free((nint) Native.EntryPoint);
           Native.EntryPoint = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.ProgrammableStageDescriptor.Constants" />
    public unsafe Silk.NET.WebGPU.ConstantEntry? Constants
    {
        get
        {
            if (Native.Constants == null)
                return null;
            return *Native.Constants;
        }

        set
        {
            // If we're setting this to null, wipe the memory.
            if (!value.HasValue)
            {
                SilkMarshal.Free((nint) Native.Constants);
                Native.Constants = null;
                return;
            }

            // Because we will always own this handle, we allocate if its null, or we overwrite data.
            if (Native.Constants == null)
                Native.Constants = (Silk.NET.WebGPU.ConstantEntry*) SilkMarshal.Allocate(sizeof(Silk.NET.WebGPU.ConstantEntry));

            // Write new data
            *Native.Constants = value.Value;
        }
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"ProgrammableStageDescriptor {{
    EntryPoint = ""{EntryPoint}""
}}";
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.EntryPoint);
        SilkMarshal.Free((nint) Native.Constants);
    }
}
