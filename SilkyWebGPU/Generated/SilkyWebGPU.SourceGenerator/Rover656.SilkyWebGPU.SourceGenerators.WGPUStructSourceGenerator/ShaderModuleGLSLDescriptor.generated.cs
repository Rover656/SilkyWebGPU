// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor"/>
public class ManagedShaderModuleGLSLDescriptor : ChainedStruct<Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor.Stage" />
    public Silk.NET.WebGPU.ShaderStage Stage
    {
        get => Native.Stage;
        set => Native.Stage = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor.Code" />
    public unsafe string Code
    {
        get => SilkMarshal.PtrToString((nint) Native.Code);
        set
       {
           if (Native.Code != null)
               SilkMarshal.Free((nint) Native.Code);
           Native.Code = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor.DefineCount" />
    public uint DefineCount
    {
        get => Native.DefineCount;
        set => Native.DefineCount = value;
    }
 
    /// <summary>
    /// This is a currently unsupported type.
    /// Native type: Silk.NET.WebGPU.Extensions.WGPU.ShaderDefine*.
    /// Original name: Defines.
    /// Is array type?: True.
    /// </summary>
    /// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor.Defines" />
    public unsafe Silk.NET.WebGPU.Extensions.WGPU.ShaderDefine* Defines
    {
        get => Native.Defines;
        set => Native.Defines = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"ShaderModuleGLSLDescriptor {{
    Stage = ""{Stage}""
    Code = ""{Code}""
    DefineCount = ""{DefineCount}""
}}";
    }

    public override unsafe void Dispose()
    {
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.Code);
    }
}
