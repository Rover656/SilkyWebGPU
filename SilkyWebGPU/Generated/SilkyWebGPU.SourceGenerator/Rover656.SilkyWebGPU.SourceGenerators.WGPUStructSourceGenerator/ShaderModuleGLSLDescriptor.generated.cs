// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor"/>
public class ShaderModuleGLSLDescriptor : ChainedStruct<Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor.Stage" />
    public Silk.NET.WebGPU.ShaderStage Stage
    {
        get => Native.Stage;
        set => Native.Stage = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor.Code" />
    public unsafe string Code
    {
        get => SilkMarshal.PtrToString((nint) Native.Code);

        set
       {
           if (Native.Code != null)
               SilkMarshal.Free((nint) Native.Code);
           Native.Code = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    // Keep a copy around for disposal.
    private NativeArray<Silk.NET.WebGPU.Extensions.WGPU.ShaderDefine> _Defines;

    /// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.ShaderModuleGLSLDescriptor.Defines" />
    /// <remarks>
    /// TODO: Write this remark.
    /// Summary: Will update if you modify the existing pointer, but if you replace it, it won't.
    /// </remarks>
    public unsafe NativeArray<Silk.NET.WebGPU.Extensions.WGPU.ShaderDefine> Defines
    {
        // Return a readonly weak copy.
        get => new NativeArray<Silk.NET.WebGPU.Extensions.WGPU.ShaderDefine>((uint) Native.DefineCount, Native.Defines);

        set
        {
            // Dispose any existing object.
            _Defines?.Dispose();

            // Allocate new chain -OR- set to default
            if (value != null)
            {
                Native.Defines = value.Ptr;
                Native.DefineCount = value.Count;
            }
            else
            {
                Native.Defines = null;
                Native.DefineCount = 0;
            }

            // Save for later disposal
            _Defines = value;
        }
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"ShaderModuleGLSLDescriptor {{
    Stage = ""{Stage}""
    Code = ""{Code}""
}}";
    }

    public override unsafe void Dispose()
    {
        _Defines?.Dispose();
        _Defines = null;
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.Code);
        Native.Code = null;
    }
}
