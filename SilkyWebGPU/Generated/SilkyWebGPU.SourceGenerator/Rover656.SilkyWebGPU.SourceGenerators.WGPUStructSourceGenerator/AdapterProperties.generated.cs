// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.AdapterProperties"/>
public class ManagedAdapterProperties : ChainedStruct<Silk.NET.WebGPU.AdapterProperties>
{

    /// <seealso cref="Silk.NET.WebGPU.AdapterProperties.VendorID" />
    public uint VendorID
    {
        get => Native.VendorID;
        set => Native.VendorID = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.AdapterProperties.VendorName" />
    public unsafe string VendorName
    {
        get => SilkMarshal.PtrToString((nint) Native.VendorName);
        set
       {
           if (Native.VendorName != null)
               SilkMarshal.Free((nint) Native.VendorName);
           Native.VendorName = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.AdapterProperties.Architecture" />
    public unsafe string Architecture
    {
        get => SilkMarshal.PtrToString((nint) Native.Architecture);
        set
       {
           if (Native.Architecture != null)
               SilkMarshal.Free((nint) Native.Architecture);
           Native.Architecture = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.AdapterProperties.DeviceID" />
    public uint DeviceID
    {
        get => Native.DeviceID;
        set => Native.DeviceID = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.AdapterProperties.Name" />
    public unsafe string Name
    {
        get => SilkMarshal.PtrToString((nint) Native.Name);
        set
       {
           if (Native.Name != null)
               SilkMarshal.Free((nint) Native.Name);
           Native.Name = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.AdapterProperties.DriverDescription" />
    public unsafe string DriverDescription
    {
        get => SilkMarshal.PtrToString((nint) Native.DriverDescription);
        set
       {
           if (Native.DriverDescription != null)
               SilkMarshal.Free((nint) Native.DriverDescription);
           Native.DriverDescription = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.AdapterProperties.AdapterType" />
    public Silk.NET.WebGPU.AdapterType AdapterType
    {
        get => Native.AdapterType;
        set => Native.AdapterType = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.AdapterProperties.BackendType" />
    public Silk.NET.WebGPU.BackendType BackendType
    {
        get => Native.BackendType;
        set => Native.BackendType = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"AdapterProperties {{
    VendorID = ""{VendorID}""
    VendorName = ""{VendorName}""
    Architecture = ""{Architecture}""
    DeviceID = ""{DeviceID}""
    Name = ""{Name}""
    DriverDescription = ""{DriverDescription}""
    AdapterType = ""{AdapterType}""
    BackendType = ""{BackendType}""
}}";
    }

    public override unsafe void Dispose()
    {
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.VendorName);
        SilkMarshal.Free((nint) Native.Architecture);
        SilkMarshal.Free((nint) Native.Name);
        SilkMarshal.Free((nint) Native.DriverDescription);
    }
}
