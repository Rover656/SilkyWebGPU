// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor"/>
public class RenderBundleEncoderDescriptor : ChainedStruct<Silk.NET.WebGPU.RenderBundleEncoderDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.Label" />
    public unsafe string Label
    {
        get => SilkMarshal.PtrToString((nint) Native.Label);

        set
       {
           if (Native.Label != null)
               SilkMarshal.Free((nint) Native.Label);
           Native.Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <summary>
    /// This is a currently unsupported type.
    /// Native type: Silk.NET.WebGPU.TextureFormat*.
    /// Original name: ColorFormats.
    /// Is array type?: true.
    /// </summary>
    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.ColorFormats" />
    public unsafe Silk.NET.WebGPU.TextureFormat* ColorFormats
    {
        get => Native.ColorFormats;
        set => Native.ColorFormats = value;
    }

    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.DepthStencilFormat" />
    public Silk.NET.WebGPU.TextureFormat DepthStencilFormat
    {
        get => Native.DepthStencilFormat;
        set => Native.DepthStencilFormat = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.SampleCount" />
    public uint SampleCount
    {
        get => Native.SampleCount;
        set => Native.SampleCount = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.DepthReadOnly" />
    public Silk.NET.Core.Bool32 DepthReadOnly
    {
        get => Native.DepthReadOnly;
        set => Native.DepthReadOnly = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.StencilReadOnly" />
    public Silk.NET.Core.Bool32 StencilReadOnly
    {
        get => Native.StencilReadOnly;
        set => Native.StencilReadOnly = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"RenderBundleEncoderDescriptor {{
    Label = ""{Label}""
    DepthStencilFormat = ""{DepthStencilFormat}""
    SampleCount = ""{SampleCount}""
    DepthReadOnly = ""{DepthReadOnly}""
    StencilReadOnly = ""{StencilReadOnly}""
}}";
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.Label);
    }
}
