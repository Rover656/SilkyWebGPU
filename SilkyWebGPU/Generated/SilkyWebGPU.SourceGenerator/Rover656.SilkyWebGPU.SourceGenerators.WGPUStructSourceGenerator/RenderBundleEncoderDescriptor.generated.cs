// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using System.Runtime.CompilerServices;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor"/>
public class RenderBundleEncoderDescriptor : ChainedStruct<Silk.NET.WebGPU.RenderBundleEncoderDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.Label" />
    public unsafe string Label
    {
        get => SilkMarshal.PtrToString((nint) Native.Label);

        set
       {
           if (Native.Label != null)
               SilkMarshal.Free((nint) Native.Label);
           Native.Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.ColorFormats" />
    public unsafe Silk.NET.WebGPU.TextureFormat? ColorFormats
    {
        get
        {
            if (Native.ColorFormats == null)
                return null;
            return *Native.ColorFormats;
        }

        set
        {
            // If we're setting this to null, wipe the memory.
            if (!value.HasValue)
            {
                SilkMarshal.Free((nint) Native.ColorFormats);
                Native.ColorFormats = null;
                return;
            }

            // Because we will always own this handle, we allocate if its null, or we overwrite data.
            if (Native.ColorFormats == null)
                Native.ColorFormats = (Silk.NET.WebGPU.TextureFormat*) SilkMarshal.Allocate(sizeof(Silk.NET.WebGPU.TextureFormat));

            // Write new data
            *Native.ColorFormats = value.Value;
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.DepthStencilFormat" />
    public Silk.NET.WebGPU.TextureFormat DepthStencilFormat
    {
        get => Native.DepthStencilFormat;
        set => Native.DepthStencilFormat = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.SampleCount" />
    public uint SampleCount
    {
        get => Native.SampleCount;
        set => Native.SampleCount = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.DepthReadOnly" />
    public Silk.NET.Core.Bool32 DepthReadOnly
    {
        get => Native.DepthReadOnly;
        set => Native.DepthReadOnly = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderBundleEncoderDescriptor.StencilReadOnly" />
    public Silk.NET.Core.Bool32 StencilReadOnly
    {
        get => Native.StencilReadOnly;
        set => Native.StencilReadOnly = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"RenderBundleEncoderDescriptor {{
    Label = ""{Label}""
    DepthStencilFormat = ""{DepthStencilFormat}""
    SampleCount = ""{SampleCount}""
    DepthReadOnly = ""{DepthReadOnly}""
    StencilReadOnly = ""{StencilReadOnly}""
}}";
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.Label);
        SilkMarshal.Free((nint) Native.ColorFormats);
    }
}
