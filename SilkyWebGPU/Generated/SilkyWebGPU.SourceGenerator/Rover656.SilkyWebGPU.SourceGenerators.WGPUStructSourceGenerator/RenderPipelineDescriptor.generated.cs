// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor"/>
public class RenderPipelineDescriptor : NewNewChainedStruct<Silk.NET.WebGPU.RenderPipelineDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Label" />
    public unsafe string Label
    {
        get => SilkMarshal.PtrToString((nint) Native.Label);

        set
       {
           if (Native.Label != null)
               SilkMarshal.Free((nint) Native.Label);
           Native.Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Layout" />
    public unsafe WebGPUPtr<Silk.NET.WebGPU.PipelineLayout> Layout
    {
        get => WebGPUPtr<Silk.NET.WebGPU.PipelineLayout>.Weak(Native.Layout);
        set => Native.Layout = value;
    }
 
    // Keep a copy around for disposal.
    private VertexState _Vertex;

    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Vertex" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe VertexState Vertex
    {
        get
        {
            // This hasn't been set.
            // A chainable will never be allocated on the library side, so it must be set from managed code before being fetched.
            if (_Vertex == null)
                return null;
            
            // Load the current native value back into the managed clone
            fixed (Silk.NET.WebGPU.VertexState* native = &_Vertex.Native)
            {
                _Vertex.Update((ChainedStruct*) native);
            }

            // Return a clone (so modifications don't break this).
            return (VertexState) _Vertex.Clone();
        }

        set
        {
            // Dispose any existing object.
            _Vertex?.Dispose();
            
            // Save a clone. This clone will manage its own memory separate to the value passed
            _Vertex = value != null ? (VertexState) value.Clone() : null;

            // Dispose the value, it has been consumed
            value?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Vertex);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Vertex = value.Get();
            else Native.Vertex = default;
        }
    }
 
    // Keep a copy around for disposal.
    private PrimitiveState _Primitive;

    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Primitive" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe PrimitiveState Primitive
    {
        get
        {
            // This hasn't been set.
            // A chainable will never be allocated on the library side, so it must be set from managed code before being fetched.
            if (_Primitive == null)
                return null;
            
            // Load the current native value back into the managed clone
            fixed (Silk.NET.WebGPU.PrimitiveState* native = &_Primitive.Native)
            {
                _Primitive.Update((ChainedStruct*) native);
            }

            // Return a clone (so modifications don't break this).
            return (PrimitiveState) _Primitive.Clone();
        }

        set
        {
            // Dispose any existing object.
            _Primitive?.Dispose();
            
            // Save a clone. This clone will manage its own memory separate to the value passed
            _Primitive = value != null ? (PrimitiveState) value.Clone() : null;

            // Dispose the value, it has been consumed
            value?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Primitive);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Primitive = value.Get();
            else Native.Primitive = default;
        }
    }
 
    /// <summary>
    /// This is raw access to the underlying field at its native type. This will likely be removed.
    /// <summary/>
    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.DepthStencil" />
    public unsafe Silk.NET.WebGPU.DepthStencilState* DepthStencilRaw
    {
        get => Native.DepthStencil;
        set => Native.DepthStencil = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.DepthStencil" />
    /// <remarks>While this property is a reference type, this property will set by value.</remarks>
    public unsafe DepthStencilState DepthStencil
    {
        // TODO: Due to limitations, these are only writeable for now... Use the Raw field instead for reading.
        //get => Native.DepthStencil;

        set
        {
            // Release any existing native pointer.
            if (Native.DepthStencil != null)
            {
                ChainHelper.DestroyChained((ChainedStruct*) Native.DepthStencil);
            }

            // Allocate new!
            if (value != null)
                Native.DepthStencil = (Silk.NET.WebGPU.DepthStencilState*)value.Alloc();
            else Native.DepthStencil = null;
        }
    }
 
    // Keep a copy around for disposal.
    private MultisampleState _Multisample;

    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Multisample" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe MultisampleState Multisample
    {
        get
        {
            // This hasn't been set.
            // A chainable will never be allocated on the library side, so it must be set from managed code before being fetched.
            if (_Multisample == null)
                return null;
            
            // Load the current native value back into the managed clone
            fixed (Silk.NET.WebGPU.MultisampleState* native = &_Multisample.Native)
            {
                _Multisample.Update((ChainedStruct*) native);
            }

            // Return a clone (so modifications don't break this).
            return (MultisampleState) _Multisample.Clone();
        }

        set
        {
            // Dispose any existing object.
            _Multisample?.Dispose();
            
            // Save a clone. This clone will manage its own memory separate to the value passed
            _Multisample = value != null ? (MultisampleState) value.Clone() : null;

            // Dispose the value, it has been consumed
            value?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.Multisample);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.Multisample = value.Get();
            else Native.Multisample = default;
        }
    }
 
    /// <summary>
    /// This is raw access to the underlying field at its native type. This will likely be removed.
    /// <summary/>
    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Fragment" />
    public unsafe Silk.NET.WebGPU.FragmentState* FragmentRaw
    {
        get => Native.Fragment;
        set => Native.Fragment = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Fragment" />
    /// <remarks>While this property is a reference type, this property will set by value.</remarks>
    public unsafe FragmentState Fragment
    {
        // TODO: Due to limitations, these are only writeable for now... Use the Raw field instead for reading.
        //get => Native.Fragment;

        set
        {
            // Release any existing native pointer.
            if (Native.Fragment != null)
            {
                ChainHelper.DestroyChained((ChainedStruct*) Native.Fragment);
            }

            // Allocate new!
            if (value != null)
                Native.Fragment = (Silk.NET.WebGPU.FragmentState*)value.Alloc();
            else Native.Fragment = null;
        }
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"RenderPipelineDescriptor {{
    Label = ""{Label}""
}}";
    }

    public override unsafe void Dispose()
    {
        _Vertex?.Dispose();
        _Vertex = null;
        _Primitive?.Dispose();
        _Primitive = null;
        _Multisample?.Dispose();
        _Multisample = null;
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        ChainHelper.FreeChain(ref Native.Vertex);
        ChainHelper.FreeChain(ref Native.Primitive);
        ChainHelper.FreeChain(ref Native.Multisample);
        ChainHelper.FreeChain((ChainedStruct*) Native.DepthStencil);
        Native.DepthStencil = null;
        ChainHelper.FreeChain((ChainedStruct*) Native.Fragment);
        Native.Fragment = null;
        SilkMarshal.Free((nint) Native.Label);
        Native.Label = null;
        SilkMarshal.Free((nint) Native.DepthStencil);
        Native.DepthStencil = null;
        SilkMarshal.Free((nint) Native.Fragment);
        Native.Fragment = null;
        base.ReleaseUnmanagedResources();
    }
    internal override RenderPipelineDescriptor Clone()
    {
        var clone = new RenderPipelineDescriptor();
        clone.Native = Native;
        clone.Next = Next;
        return clone;
    }
}
