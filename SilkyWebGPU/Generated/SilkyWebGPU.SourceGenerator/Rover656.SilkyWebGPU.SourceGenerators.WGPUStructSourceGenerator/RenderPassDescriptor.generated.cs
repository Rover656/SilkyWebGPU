// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor"/>
public class RenderPassDescriptor : ChainedStruct<Silk.NET.WebGPU.RenderPassDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor.Label" />
    public unsafe string Label
    {
        get => SilkMarshal.PtrToString((nint) Native.Label);

        set
       {
           if (Native.Label != null)
               SilkMarshal.Free((nint) Native.Label);
           Native.Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    // Keep a copy around for disposal.
    private NativeChainableArray<Silk.NET.WebGPU.RenderPassColorAttachment> _ColorAttachments;

    /// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor.ColorAttachments" />
    /// <remarks>
    /// TODO: Write this remark.
    /// Summary: Will update if you modify the existing pointer, but if you replace it, it won't.
    /// </remarks>
    public unsafe NativeChainableArray<Silk.NET.WebGPU.RenderPassColorAttachment> ColorAttachments
    {
        // Limitations do not permit this to work... yet.
        //get => Native.ColorAttachments;

        set
        {
            // Dispose any existing object.
            _ColorAttachments?.Dispose();

            // Allocate new chain -OR- set to default
            if (value != null)
            {
                Native.ColorAttachments = value.Ptr;
                Native.ColorAttachmentCount = value.Count;
            }
            else
            {
                Native.ColorAttachments = null;
                Native.ColorAttachmentCount = 0;
            }

            // Save for later disposal
            _ColorAttachments = value;
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor.DepthStencilAttachment" />
    public unsafe Silk.NET.WebGPU.RenderPassDepthStencilAttachment? DepthStencilAttachment
    {
        get
        {
            if (Native.DepthStencilAttachment == null)
                return null;
            return *Native.DepthStencilAttachment;
        }

        set
        {
            // If we're setting this to null, wipe the memory.
            if (!value.HasValue)
            {
                SilkMarshal.Free((nint) Native.DepthStencilAttachment);
                Native.DepthStencilAttachment = null;
                return;
            }

            // Because we will always own this handle, we allocate if its null, or we overwrite data.
            if (Native.DepthStencilAttachment == null)
                Native.DepthStencilAttachment = (Silk.NET.WebGPU.RenderPassDepthStencilAttachment*) SilkMarshal.Allocate(sizeof(Silk.NET.WebGPU.RenderPassDepthStencilAttachment));

            // Write new data
            *Native.DepthStencilAttachment = value.Value;
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor.OcclusionQuerySet" />
    public unsafe WebGPUPtr<Silk.NET.WebGPU.QuerySet> OcclusionQuerySet
    {
        get => WebGPUPtr<Silk.NET.WebGPU.QuerySet>.Weak(Native.OcclusionQuerySet);
        set => Native.OcclusionQuerySet = value;
    }
 
    /// <summary>
    /// This is a currently unsupported type.
    /// Native type: Silk.NET.WebGPU.RenderPassTimestampWrite*.
    /// Original name: TimestampWrites.
    /// Is array type?: true.
    /// </summary>
    /// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor.TimestampWrites" />
    public unsafe Silk.NET.WebGPU.RenderPassTimestampWrite* TimestampWrites
    {
        get => Native.TimestampWrites;
        set => Native.TimestampWrites = value;
    }

    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"RenderPassDescriptor {{
    Label = ""{Label}""
}}";
    }

    public override unsafe void Dispose()
    {
        _ColorAttachments?.Dispose();
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.Label);
        SilkMarshal.Free((nint) Native.DepthStencilAttachment);
    }
}
