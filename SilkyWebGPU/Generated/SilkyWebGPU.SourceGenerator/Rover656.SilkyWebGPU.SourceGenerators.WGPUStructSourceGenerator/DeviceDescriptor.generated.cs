// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor"/>
public class DeviceDescriptor : ChainedStruct<Silk.NET.WebGPU.DeviceDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.Label" />
    public unsafe string Label
    {
        get => SilkMarshal.PtrToString((nint) Native.Label);

        set
       {
           if (Native.Label != null)
               SilkMarshal.Free((nint) Native.Label);
           Native.Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    // Keep a copy around for disposal.
    private NativeArray<Silk.NET.WebGPU.FeatureName> _RequiredFeatures;

    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.RequiredFeatures" />
    /// <remarks>
    /// TODO: Write this remark.
    /// Summary: Will update if you modify the existing pointer, but if you replace it, it won't.
    /// </remarks>
    public unsafe NativeArray<Silk.NET.WebGPU.FeatureName> RequiredFeatures
    {
        // Return a readonly weak copy.
        get => new NativeArray<Silk.NET.WebGPU.FeatureName>((uint) Native.RequiredFeaturesCount, Native.RequiredFeatures);

        set
        {
            // Dispose any existing object.
            _RequiredFeatures?.Dispose();

            // Allocate new chain -OR- set to default
            if (value != null)
            {
                Native.RequiredFeatures = value.Ptr;
                Native.RequiredFeaturesCount = value.Count;
            }
            else
            {
                Native.RequiredFeatures = null;
                Native.RequiredFeaturesCount = 0;
            }

            // Save for later disposal
            _RequiredFeatures = value;
        }
    }
 
    /// <summary>
    /// This is raw access to the underlying field at its native type. This will likely be removed.
    /// <summary/>
    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.RequiredLimits" />
    public unsafe Silk.NET.WebGPU.RequiredLimits* RequiredLimitsRaw
    {
        get => Native.RequiredLimits;
        set => Native.RequiredLimits = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.RequiredLimits" />
    /// <remarks>While this property is a reference type, this property will set by value.</remarks>
    public unsafe RequiredLimits RequiredLimits
    {
        // TODO: Due to limitations, these are only writeable for now... Use the Raw field instead for reading.
        //get => Native.RequiredLimits;

        set
        {
            // Release any existing native pointer.
            if (Native.RequiredLimits != null)
            {
                ChainHelper.FreeChain((ChainedStruct*) Native.RequiredLimits);
                SilkMarshal.Free((nint) Native.RequiredLimits);
            }

            // Allocate new!
            if (value != null)
                Native.RequiredLimits = value.Alloc();
            else Native.RequiredLimits = null;
        }
    }
 
    // Keep a copy around for disposal.
    private QueueDescriptor _DefaultQueue;

    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.DefaultQueue" />
    /// <remarks>
    /// Using this setter will take ownership of the provided object and will copy its data by value.
    /// This means you can no longer modify the contents of the object and have them update as a part of this one.
    /// This also means, when this object is disposed (or when you replace the value of this property with another value), the old value will be disposed.
    /// This is to ensure disposal occurs at the right time.
    /// </remarks>
    public unsafe QueueDescriptor DefaultQueue
    {
        // TODO: Due to limitations, these are only writeable for now... Use the Raw field instead for reading.
        //get => Native.DefaultQueue;

        set
        {
            // Dispose any existing object.
            _DefaultQueue?.Dispose();

            // Attempt to free any existing chains
            ChainHelper.FreeChain(ref Native.DefaultQueue);

            // Allocate new chain -OR- set to default
            if (value != null)
                Native.DefaultQueue = value.GetWithChain();
            else Native.DefaultQueue = default;

            // Save
            _DefaultQueue = value;
        }
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"DeviceDescriptor {{
    Label = ""{Label}""
}}";
    }

    public override unsafe void Dispose()
    {
        _RequiredFeatures?.Dispose();
        _RequiredFeatures = null;
        _DefaultQueue?.Dispose();
        _DefaultQueue = null;
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        ChainHelper.FreeChain(ref Native.DefaultQueue);
        ChainHelper.FreeChain((ChainedStruct*) Native.RequiredLimits);
        Native.RequiredLimits = null;
        SilkMarshal.Free((nint) Native.Label);
        Native.Label = null;
        SilkMarshal.Free((nint) Native.RequiredLimits);
        Native.RequiredLimits = null;
    }
}
