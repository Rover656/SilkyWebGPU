// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor"/>
public class ManagedDeviceDescriptor : ChainedStruct<Silk.NET.WebGPU.DeviceDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.Label" />
    public unsafe string Label
    {
        get => SilkMarshal.PtrToString((nint) Native.Label);
        set
       {
           if (Native.Label != null)
               SilkMarshal.Free((nint) Native.Label);
           Native.Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.RequiredFeaturesCount" />
    public uint RequiredFeaturesCount
    {
        get => Native.RequiredFeaturesCount;
        set => Native.RequiredFeaturesCount = value;
    }
 
    /// <summary>
    /// This is a currently unsupported type.
    /// Native type: Silk.NET.WebGPU.FeatureName*.
    /// Original name: RequiredFeatures.
    /// Is array type?: True.
    /// </summary>
    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.RequiredFeatures" />
    public unsafe Silk.NET.WebGPU.FeatureName* RequiredFeatures
    {
        get => Native.RequiredFeatures;
        set => Native.RequiredFeatures = value;
    }
 
    /// <summary>
    /// This is a currently unsupported type.
    /// Native type: Silk.NET.WebGPU.RequiredLimits*.
    /// Original name: RequiredLimits.
    /// Is array type?: False.
    /// </summary>
    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.RequiredLimits" />
    public unsafe Silk.NET.WebGPU.RequiredLimits* RequiredLimits
    {
        get => Native.RequiredLimits;
        set => Native.RequiredLimits = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.DefaultQueue" />
    public Silk.NET.WebGPU.QueueDescriptor DefaultQueue
    {
        get => Native.DefaultQueue;
        set => Native.DefaultQueue = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"DeviceDescriptor {{
    Label = ""{Label}""
    RequiredFeaturesCount = ""{RequiredFeaturesCount}""
    DefaultQueue = ""{DefaultQueue}""
}}";
    }

    public override unsafe void Dispose()
    {
        base.Dispose();
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.Label);
    }
}
