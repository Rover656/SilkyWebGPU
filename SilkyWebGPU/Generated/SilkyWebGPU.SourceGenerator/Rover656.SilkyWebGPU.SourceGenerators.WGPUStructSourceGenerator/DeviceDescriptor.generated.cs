// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor"/>
public class DeviceDescriptor : ChainedStruct<Silk.NET.WebGPU.DeviceDescriptor>
{

    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.Label" />
    public unsafe string Label
    {
        get => SilkMarshal.PtrToString((nint) Native.Label);

        set
       {
           if (Native.Label != null)
               SilkMarshal.Free((nint) Native.Label);
           Native.Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <summary>
    /// This is a currently unsupported type.
    /// Native type: Silk.NET.WebGPU.FeatureName*.
    /// Original name: RequiredFeatures.
    /// Is array type?: true.
    /// </summary>
    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.RequiredFeatures" />
    public unsafe Silk.NET.WebGPU.FeatureName* RequiredFeatures
    {
        get => Native.RequiredFeatures;
        set => Native.RequiredFeatures = value;
    }

    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.RequiredLimits" />
    public unsafe Silk.NET.WebGPU.RequiredLimits? RequiredLimits
    {
        get
        {
            if (Native.RequiredLimits == null)
                return null;
            return *Native.RequiredLimits;
        }

        set
        {
            // If we're setting this to null, wipe the memory.
            if (!value.HasValue)
            {
                SilkMarshal.Free((nint) Native.RequiredLimits);
                Native.RequiredLimits = null;
                return;
            }

            // Because we will always own this handle, we allocate if its null, or we overwrite data.
            if (Native.RequiredLimits == null)
                Native.RequiredLimits = (Silk.NET.WebGPU.RequiredLimits*) SilkMarshal.Allocate(sizeof(Silk.NET.WebGPU.RequiredLimits));

            // Write new data
            *Native.RequiredLimits = value.Value;
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.DeviceDescriptor.DefaultQueue" />
    public Silk.NET.WebGPU.QueueDescriptor DefaultQueue
    {
        get => Native.DefaultQueue;
        set => Native.DefaultQueue = value;
    }
 
    public override unsafe string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"DeviceDescriptor {{
    Label = ""{Label}""
    DefaultQueue = ""{DefaultQueue}""
}}";
    }

    protected override unsafe void ReleaseUnmanagedResources()
    {
        SilkMarshal.Free((nint) Native.Label);
        SilkMarshal.Free((nint) Native.RequiredLimits);
    }
}
