// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.RequestAdapterOptions"/>
public sealed unsafe class RequestAdapterOptions : ChainedStruct<Silk.NET.WebGPU.RequestAdapterOptions>
{
    public static implicit operator Silk.NET.WebGPU.RequestAdapterOptions(RequestAdapterOptions managed)
        => managed != null ? managed.Get() : default;

    public static implicit operator Span<Silk.NET.WebGPU.RequestAdapterOptions>(RequestAdapterOptions managed)
        => managed != null ? managed.GetRef() : default;

    /// <seealso cref="Silk.NET.WebGPU.RequestAdapterOptions.CompatibleSurface" />
    public WebGPUPtr<Silk.NET.WebGPU.Surface> CompatibleSurface
    {
        get => WebGPUPtr<Silk.NET.WebGPU.Surface>.Weak(Native->CompatibleSurface);
        set => Native->CompatibleSurface = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RequestAdapterOptions.PowerPreference" />
    public Silk.NET.WebGPU.PowerPreference PowerPreference
    {
        get => Native->PowerPreference;
        set => Native->PowerPreference = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RequestAdapterOptions.ForceFallbackAdapter" />
    public Silk.NET.Core.Bool32 ForceFallbackAdapter
    {
        get => Native->ForceFallbackAdapter;
        set => Native->ForceFallbackAdapter = value;
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"RequestAdapterOptions {{
    PowerPreference = ""{PowerPreference}""
    ForceFallbackAdapter = ""{ForceFallbackAdapter}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        base.Dispose(disposing);
    }
}
