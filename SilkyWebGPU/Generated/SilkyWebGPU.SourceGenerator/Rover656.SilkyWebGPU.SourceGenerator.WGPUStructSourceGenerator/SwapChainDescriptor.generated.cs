// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.SwapChainDescriptor"/>
public sealed unsafe class SwapChainDescriptor : ChainedStruct<Silk.NET.WebGPU.SwapChainDescriptor>
{
    public static implicit operator Silk.NET.WebGPU.SwapChainDescriptor(SwapChainDescriptor managed)
        => managed != null ? managed.Get() : default;

    public static implicit operator Span<Silk.NET.WebGPU.SwapChainDescriptor>(SwapChainDescriptor managed)
        => managed != null ? managed.GetRef() : default;

    /// <seealso cref="Silk.NET.WebGPU.SwapChainDescriptor.Label" />
    public string Label
    {
        get => SilkMarshal.PtrToString((nint) Native->Label);
        set
        {
           if (Native->Label != null)
               SilkMarshal.Free((nint) Native->Label);
           Native->Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.SwapChainDescriptor.Usage" />
    public Silk.NET.WebGPU.TextureUsage Usage
    {
        get => Native->Usage;
        set => Native->Usage = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.SwapChainDescriptor.Format" />
    public Silk.NET.WebGPU.TextureFormat Format
    {
        get => Native->Format;
        set => Native->Format = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.SwapChainDescriptor.Width" />
    public uint Width
    {
        get => Native->Width;
        set => Native->Width = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.SwapChainDescriptor.Height" />
    public uint Height
    {
        get => Native->Height;
        set => Native->Height = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.SwapChainDescriptor.PresentMode" />
    public Silk.NET.WebGPU.PresentMode PresentMode
    {
        get => Native->PresentMode;
        set => Native->PresentMode = value;
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"SwapChainDescriptor {{
    Label = ""{Label}""
    Usage = ""{Usage}""
    Format = ""{Format}""
    Width = ""{Width}""
    Height = ""{Height}""
    PresentMode = ""{PresentMode}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        SilkMarshal.Free((nint) Native->Label);
        Native->Label = null;
        base.Dispose(disposing);
    }
}
