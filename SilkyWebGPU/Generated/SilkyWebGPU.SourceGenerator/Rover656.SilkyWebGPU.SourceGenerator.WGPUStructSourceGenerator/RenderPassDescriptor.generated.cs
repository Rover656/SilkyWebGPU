// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor"/>
public sealed unsafe class RenderPassDescriptor : ChainedStruct<Silk.NET.WebGPU.RenderPassDescriptor>
{
    public static implicit operator Silk.NET.WebGPU.RenderPassDescriptor(RenderPassDescriptor managed)
        => managed != null ? managed.Get() : default;

    public static implicit operator Span<Silk.NET.WebGPU.RenderPassDescriptor>(RenderPassDescriptor managed)
        => managed != null ? managed.GetRef() : default;

    /// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor.Label" />
    public string Label
    {
        get => SilkMarshal.PtrToString((nint) Native->Label);
        set
        {
           if (Native->Label != null)
               SilkMarshal.Free((nint) Native->Label);
           Native->Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    // Keep a copy around for disposal.
    private NativeArray<Silk.NET.WebGPU.RenderPassColorAttachment> _ColorAttachments;

    /// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor.ColorAttachments" />
    /// <remarks>
    /// TODO: Write this remark.
    /// Summary: Will update if you modify the existing pointer, but if you replace it, it won't.
    /// </remarks>
    public NativeArray<Silk.NET.WebGPU.RenderPassColorAttachment> ColorAttachments
    {
        // Return a readonly weak copy.
        get => new NativeArray<Silk.NET.WebGPU.RenderPassColorAttachment>((int) Native->ColorAttachmentCount, Native->ColorAttachments);

        set
        {
            // Dispose any existing object.
            _ColorAttachments?.Dispose();

            // Set array
            if (value != null)
            {
                Native->ColorAttachments = value.Ptr;
                Native->ColorAttachmentCount = (UInt32) value.Count;
            }
            else
            {
                Native->ColorAttachments = null;
                Native->ColorAttachmentCount = 0;
            }

            // Save for later disposal
            _ColorAttachments = value;
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor.DepthStencilAttachment" />
    public Silk.NET.WebGPU.RenderPassDepthStencilAttachment? DepthStencilAttachment
    {
        get
        {
            if (Native->DepthStencilAttachment == null)
                return null;
            return *Native->DepthStencilAttachment;
        }

        set
        {
            // If we're setting this to null, wipe the memory.
            if (!value.HasValue)
            {
                SilkMarshal.Free((nint) Native->DepthStencilAttachment);
                Native->DepthStencilAttachment = null;
                return;
            }

            // Because we will always own this handle, we allocate if its null, or we overwrite data.
            if (Native->DepthStencilAttachment == null)
                Native->DepthStencilAttachment = (Silk.NET.WebGPU.RenderPassDepthStencilAttachment*) SilkMarshal.Allocate(sizeof(Silk.NET.WebGPU.RenderPassDepthStencilAttachment));

            // Write new data
            *Native->DepthStencilAttachment = value.Value;
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor.OcclusionQuerySet" />
    public WebGPUPtr<Silk.NET.WebGPU.QuerySet> OcclusionQuerySet
    {
        get => WebGPUPtr<Silk.NET.WebGPU.QuerySet>.Weak(Native->OcclusionQuerySet);
        set => Native->OcclusionQuerySet = value;
    }
 
    // Keep a copy around for disposal.
    private NativeArray<Silk.NET.WebGPU.RenderPassTimestampWrite> _TimestampWrites;

    /// <seealso cref="Silk.NET.WebGPU.RenderPassDescriptor.TimestampWrites" />
    /// <remarks>
    /// TODO: Write this remark.
    /// Summary: Will update if you modify the existing pointer, but if you replace it, it won't.
    /// </remarks>
    public NativeArray<Silk.NET.WebGPU.RenderPassTimestampWrite> TimestampWrites
    {
        // Return a readonly weak copy.
        get => new NativeArray<Silk.NET.WebGPU.RenderPassTimestampWrite>((int) Native->TimestampWriteCount, Native->TimestampWrites);

        set
        {
            // Dispose any existing object.
            _TimestampWrites?.Dispose();

            // Set array
            if (value != null)
            {
                Native->TimestampWrites = value.Ptr;
                Native->TimestampWriteCount = (UInt32) value.Count;
            }
            else
            {
                Native->TimestampWrites = null;
                Native->TimestampWriteCount = 0;
            }

            // Save for later disposal
            _TimestampWrites = value;
        }
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"RenderPassDescriptor {{
    Label = ""{Label}""
    DepthStencilAttachment = ""{DepthStencilAttachment}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        if (disposing)
        {
            _ColorAttachments?.Dispose();
            _ColorAttachments = null;
            _TimestampWrites?.Dispose();
            _TimestampWrites = null;
        }

        SilkMarshal.Free((nint) Native->Label);
        Native->Label = null;
        SilkMarshal.Free((nint) Native->DepthStencilAttachment);
        Native->DepthStencilAttachment = null;
        base.Dispose(disposing);
    }
}
