// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.ColorTargetState"/>
public sealed unsafe class ColorTargetState : ChainedStruct<Silk.NET.WebGPU.ColorTargetState>
{
    public static implicit operator Silk.NET.WebGPU.ColorTargetState(ColorTargetState managed)
        => managed != null ? managed.Get() : default;

    public static implicit operator Span<Silk.NET.WebGPU.ColorTargetState>(ColorTargetState managed)
        => managed != null ? managed.GetRef() : default;

    /// <seealso cref="Silk.NET.WebGPU.ColorTargetState.Format" />
    public Silk.NET.WebGPU.TextureFormat Format
    {
        get => Native->Format;
        set => Native->Format = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.ColorTargetState.Blend" />
    public Silk.NET.WebGPU.BlendState? Blend
    {
        get
        {
            if (Native->Blend == null)
                return null;
            return *Native->Blend;
        }

        set
        {
            // If we're setting this to null, wipe the memory.
            if (!value.HasValue)
            {
                SilkMarshal.Free((nint) Native->Blend);
                Native->Blend = null;
                return;
            }

            // Because we will always own this handle, we allocate if its null, or we overwrite data.
            if (Native->Blend == null)
                Native->Blend = (Silk.NET.WebGPU.BlendState*) SilkMarshal.Allocate(sizeof(Silk.NET.WebGPU.BlendState));

            // Write new data
            *Native->Blend = value.Value;
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.ColorTargetState.WriteMask" />
    public Silk.NET.WebGPU.ColorWriteMask WriteMask
    {
        get => Native->WriteMask;
        set => Native->WriteMask = value;
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"ColorTargetState {{
    Format = ""{Format}""
    Blend = ""{Blend}""
    WriteMask = ""{WriteMask}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        SilkMarshal.Free((nint) Native->Blend);
        Native->Blend = null;
        base.Dispose(disposing);
    }
}
