// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.BlendComponent"/>
public sealed unsafe class BlendComponent : WrappedStruct<Silk.NET.WebGPU.BlendComponent>
{
    public BlendComponent() : base() { }
    public BlendComponent(Silk.NET.WebGPU.BlendComponent native) : base(native) { }

    public static implicit operator BlendComponent(Silk.NET.WebGPU.BlendComponent native)
        => new BlendComponent(native);

    /// <seealso cref="Silk.NET.WebGPU.BlendComponent.Operation" />
    public Silk.NET.WebGPU.BlendOperation Operation
    {
        get => Native.Operation;
        set => Native.Operation = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.BlendComponent.SrcFactor" />
    public Silk.NET.WebGPU.BlendFactor SrcFactor
    {
        get => Native.SrcFactor;
        set => Native.SrcFactor = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.BlendComponent.DstFactor" />
    public Silk.NET.WebGPU.BlendFactor DstFactor
    {
        get => Native.DstFactor;
        set => Native.DstFactor = value;
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"BlendComponent {{
    Operation = ""{Operation}""
    SrcFactor = ""{SrcFactor}""
    DstFactor = ""{DstFactor}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        base.Dispose(disposing);
    }
}
