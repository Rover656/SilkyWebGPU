// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor"/>
public sealed unsafe class RenderPipelineDescriptor : ChainedStruct<Silk.NET.WebGPU.RenderPipelineDescriptor>
{
    public static implicit operator Silk.NET.WebGPU.RenderPipelineDescriptor(RenderPipelineDescriptor managed)
        => managed != null ? managed.Get() : default;

    public static implicit operator Span<Silk.NET.WebGPU.RenderPipelineDescriptor>(RenderPipelineDescriptor managed)
        => managed != null ? managed.GetRef() : default;

    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Label" />
    public string Label
    {
        get => SilkMarshal.PtrToString((nint) Native->Label);
        set
        {
           if (Native->Label != null)
               SilkMarshal.Free((nint) Native->Label);
           Native->Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Layout" />
    public WebGPUPtr<Silk.NET.WebGPU.PipelineLayout> Layout
    {
        get => WebGPUPtr<Silk.NET.WebGPU.PipelineLayout>.Weak(Native->Layout);
        set => Native->Layout = value;
    }
 
    // Keep the pointer alive :D
    private VertexState _Vertex;

    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Vertex" />
    public VertexState Vertex
    {
        get => _Vertex;

        set
        {
            // Dispose existing
            _Vertex?.Dispose();
            
            // Store managed version
            _Vertex = value;

            // Set within chain.
            if (value != null)
                Native->Vertex = value.Get();
            else Native->Vertex = default;
        }
    }
 
    // Keep the pointer alive :D
    private PrimitiveState _Primitive;

    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Primitive" />
    public PrimitiveState Primitive
    {
        get => _Primitive;

        set
        {
            // Dispose existing
            _Primitive?.Dispose();
            
            // Store managed version
            _Primitive = value;

            // Set within chain.
            if (value != null)
                Native->Primitive = value.Get();
            else Native->Primitive = default;
        }
    }
 
    // Keep the pointer alive :D
    private DepthStencilState _DepthStencil;

    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.DepthStencil" />
    public DepthStencilState DepthStencil
    {
        get => _DepthStencil;
        set
        {
            // Dispose existing
            _DepthStencil?.Dispose();
            
            // Store managed version
            _DepthStencil = value;

            // Set within chain.
            if (value != null)
                Native->DepthStencil = (Silk.NET.WebGPU.DepthStencilState*) value.GetPtr();
            else Native->DepthStencil = null;
        }
    }
 
    // Keep the pointer alive :D
    private MultisampleState _Multisample;

    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Multisample" />
    public MultisampleState Multisample
    {
        get => _Multisample;

        set
        {
            // Dispose existing
            _Multisample?.Dispose();
            
            // Store managed version
            _Multisample = value;

            // Set within chain.
            if (value != null)
                Native->Multisample = value.Get();
            else Native->Multisample = default;
        }
    }
 
    // Keep the pointer alive :D
    private FragmentState _Fragment;

    /// <seealso cref="Silk.NET.WebGPU.RenderPipelineDescriptor.Fragment" />
    public FragmentState Fragment
    {
        get => _Fragment;
        set
        {
            // Dispose existing
            _Fragment?.Dispose();
            
            // Store managed version
            _Fragment = value;

            // Set within chain.
            if (value != null)
                Native->Fragment = (Silk.NET.WebGPU.FragmentState*) value.GetPtr();
            else Native->Fragment = null;
        }
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"RenderPipelineDescriptor {{
    Label = ""{Label}""
    Vertex = ""{Vertex}""
    Primitive = ""{Primitive}""
    DepthStencil = ""{DepthStencil}""
    Multisample = ""{Multisample}""
    Fragment = ""{Fragment}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        if (disposing)
        {
            _Vertex?.Dispose();
            _Vertex = null;
            _Primitive?.Dispose();
            _Primitive = null;
            _Multisample?.Dispose();
            _Multisample = null;
        }

        SilkMarshal.Free((nint) Native->Label);
        Native->Label = null;
        SilkMarshal.Free((nint) Native->DepthStencil);
        Native->DepthStencil = null;
        SilkMarshal.Free((nint) Native->Fragment);
        Native->Fragment = null;
        base.Dispose(disposing);
    }
}
