// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.RenderPassColorAttachment"/>
public sealed unsafe class RenderPassColorAttachment : WrappedStruct<Silk.NET.WebGPU.RenderPassColorAttachment>
{
    public RenderPassColorAttachment() : base() { }
    public RenderPassColorAttachment(Silk.NET.WebGPU.RenderPassColorAttachment native) : base(native) { }

    public static implicit operator RenderPassColorAttachment(Silk.NET.WebGPU.RenderPassColorAttachment native)
        => new RenderPassColorAttachment(native);

    /// <seealso cref="Silk.NET.WebGPU.RenderPassColorAttachment.View" />
    public WebGPUPtr<Silk.NET.WebGPU.TextureView> View
    {
        get => WebGPUPtr<Silk.NET.WebGPU.TextureView>.Weak(Native.View);
        set => Native.View = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPassColorAttachment.ResolveTarget" />
    public WebGPUPtr<Silk.NET.WebGPU.TextureView> ResolveTarget
    {
        get => WebGPUPtr<Silk.NET.WebGPU.TextureView>.Weak(Native.ResolveTarget);
        set => Native.ResolveTarget = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPassColorAttachment.LoadOp" />
    public Silk.NET.WebGPU.LoadOp LoadOp
    {
        get => Native.LoadOp;
        set => Native.LoadOp = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPassColorAttachment.StoreOp" />
    public Silk.NET.WebGPU.StoreOp StoreOp
    {
        get => Native.StoreOp;
        set => Native.StoreOp = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPassColorAttachment.ClearValue" />
    public Color ClearValue
    {
        get => Native.ClearValue;
        set => Native.ClearValue = value;
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"RenderPassColorAttachment {{
    LoadOp = ""{LoadOp}""
    StoreOp = ""{StoreOp}""
    ClearValue = ""{ClearValue}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        base.Dispose(disposing);
    }
}
