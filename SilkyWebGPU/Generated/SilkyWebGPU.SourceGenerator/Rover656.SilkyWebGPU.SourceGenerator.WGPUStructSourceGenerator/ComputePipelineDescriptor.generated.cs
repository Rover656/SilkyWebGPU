// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.ComputePipelineDescriptor"/>
public sealed unsafe class ComputePipelineDescriptor : ChainedStruct<Silk.NET.WebGPU.ComputePipelineDescriptor>
{
    public static implicit operator Silk.NET.WebGPU.ComputePipelineDescriptor(ComputePipelineDescriptor managed)
        => managed != null ? managed.Get() : default;

    public static implicit operator Span<Silk.NET.WebGPU.ComputePipelineDescriptor>(ComputePipelineDescriptor managed)
        => managed != null ? managed.GetRef() : default;

    /// <seealso cref="Silk.NET.WebGPU.ComputePipelineDescriptor.Label" />
    public string Label
    {
        get => SilkMarshal.PtrToString((nint) Native->Label);
        set
        {
           if (Native->Label != null)
               SilkMarshal.Free((nint) Native->Label);
           Native->Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.ComputePipelineDescriptor.Layout" />
    public WebGPUPtr<Silk.NET.WebGPU.PipelineLayout> Layout
    {
        get => WebGPUPtr<Silk.NET.WebGPU.PipelineLayout>.Weak(Native->Layout);
        set => Native->Layout = value;
    }
 
    // Keep the pointer alive :D
    private ProgrammableStageDescriptor _Compute;

    /// <seealso cref="Silk.NET.WebGPU.ComputePipelineDescriptor.Compute" />
    public ProgrammableStageDescriptor Compute
    {
        get => _Compute;

        set
        {
            // Dispose existing
            _Compute?.Dispose();
            
            // Store managed version
            _Compute = value;

            // Set within chain.
            if (value != null)
                Native->Compute = value.Get();
            else Native->Compute = default;
        }
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"ComputePipelineDescriptor {{
    Label = ""{Label}""
    Compute = ""{Compute}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        if (disposing)
        {
            _Compute?.Dispose();
            _Compute = null;
        }

        SilkMarshal.Free((nint) Native->Label);
        Native->Label = null;
        base.Dispose(disposing);
    }
}
