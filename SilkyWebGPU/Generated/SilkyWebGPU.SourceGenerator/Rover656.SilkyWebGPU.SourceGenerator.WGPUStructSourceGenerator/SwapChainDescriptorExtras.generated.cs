// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.SwapChainDescriptorExtras"/>
public sealed unsafe class SwapChainDescriptorExtras : ChainedStruct<Silk.NET.WebGPU.Extensions.WGPU.SwapChainDescriptorExtras>
{
    public static implicit operator Silk.NET.WebGPU.Extensions.WGPU.SwapChainDescriptorExtras(SwapChainDescriptorExtras managed)
        => managed != null ? managed.Get() : default;

    public static implicit operator Span<Silk.NET.WebGPU.Extensions.WGPU.SwapChainDescriptorExtras>(SwapChainDescriptorExtras managed)
        => managed != null ? managed.GetRef() : default;

    /// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.SwapChainDescriptorExtras.AlphaMode" />
    public Silk.NET.WebGPU.Extensions.WGPU.CompositeAlphaMode AlphaMode
    {
        get => Native->AlphaMode;
        set => Native->AlphaMode = value;
    }
 
    // Keep a copy around for disposal.
    private NativeArray<Silk.NET.WebGPU.TextureFormat> _ViewFormats;

    /// <seealso cref="Silk.NET.WebGPU.Extensions.WGPU.SwapChainDescriptorExtras.ViewFormats" />
    /// <remarks>
    /// TODO: Write this remark.
    /// Summary: Will update if you modify the existing pointer, but if you replace it, it won't.
    /// </remarks>
    public NativeArray<Silk.NET.WebGPU.TextureFormat> ViewFormats
    {
        // Return a readonly weak copy.
        get => new NativeArray<Silk.NET.WebGPU.TextureFormat>((int) Native->ViewFormatCount, Native->ViewFormats);

        set
        {
            // Dispose any existing object.
            _ViewFormats?.Dispose();

            // Set array
            if (value != null)
            {
                Native->ViewFormats = value.Ptr;
                Native->ViewFormatCount = (UIntPtr) value.Count;
            }
            else
            {
                Native->ViewFormats = null;
                Native->ViewFormatCount = 0;
            }

            // Save for later disposal
            _ViewFormats = value;
        }
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"SwapChainDescriptorExtras {{
    AlphaMode = ""{AlphaMode}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        if (disposing)
        {
            _ViewFormats?.Dispose();
            _ViewFormats = null;
        }

        base.Dispose(disposing);
    }
}
