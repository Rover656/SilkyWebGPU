// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.RenderPassTimestampWrite"/>
public sealed unsafe class RenderPassTimestampWrite : WrappedStruct<Silk.NET.WebGPU.RenderPassTimestampWrite>
{
    public RenderPassTimestampWrite() : base() { }
    public RenderPassTimestampWrite(Silk.NET.WebGPU.RenderPassTimestampWrite native) : base(native) { }

    public static implicit operator RenderPassTimestampWrite(Silk.NET.WebGPU.RenderPassTimestampWrite native)
        => new RenderPassTimestampWrite(native);

    /// <seealso cref="Silk.NET.WebGPU.RenderPassTimestampWrite.QuerySet" />
    public WebGPUPtr<Silk.NET.WebGPU.QuerySet> QuerySet
    {
        get => WebGPUPtr<Silk.NET.WebGPU.QuerySet>.Weak(Native.QuerySet);
        set => Native.QuerySet = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPassTimestampWrite.QueryIndex" />
    public uint QueryIndex
    {
        get => Native.QueryIndex;
        set => Native.QueryIndex = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.RenderPassTimestampWrite.Location" />
    public Silk.NET.WebGPU.RenderPassTimestampLocation Location
    {
        get => Native.Location;
        set => Native.Location = value;
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"RenderPassTimestampWrite {{
    QueryIndex = ""{QueryIndex}""
    Location = ""{Location}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        base.Dispose(disposing);
    }
}
