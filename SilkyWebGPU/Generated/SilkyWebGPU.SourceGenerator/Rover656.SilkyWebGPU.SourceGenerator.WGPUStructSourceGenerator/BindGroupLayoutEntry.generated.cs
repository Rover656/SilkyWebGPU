// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry"/>
public sealed unsafe class BindGroupLayoutEntry : ChainedStruct<Silk.NET.WebGPU.BindGroupLayoutEntry>
{
    public static implicit operator Silk.NET.WebGPU.BindGroupLayoutEntry(BindGroupLayoutEntry managed)
        => managed != null ? managed.Get() : default;

    public static implicit operator Span<Silk.NET.WebGPU.BindGroupLayoutEntry>(BindGroupLayoutEntry managed)
        => managed != null ? managed.GetRef() : default;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Binding" />
    public uint Binding
    {
        get => Native->Binding;
        set => Native->Binding = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Visibility" />
    public Silk.NET.WebGPU.ShaderStage Visibility
    {
        get => Native->Visibility;
        set => Native->Visibility = value;
    }
 
    // Keep the pointer alive :D
    private BufferBindingLayout _Buffer;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Buffer" />
    public BufferBindingLayout Buffer
    {
        get => _Buffer;

        set
        {
            // Dispose existing
            _Buffer?.Dispose();
            
            // Store managed version
            _Buffer = value;

            // Set within chain.
            if (value != null)
                Native->Buffer = value.Get();
            else Native->Buffer = default;
        }
    }
 
    // Keep the pointer alive :D
    private SamplerBindingLayout _Sampler;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Sampler" />
    public SamplerBindingLayout Sampler
    {
        get => _Sampler;

        set
        {
            // Dispose existing
            _Sampler?.Dispose();
            
            // Store managed version
            _Sampler = value;

            // Set within chain.
            if (value != null)
                Native->Sampler = value.Get();
            else Native->Sampler = default;
        }
    }
 
    // Keep the pointer alive :D
    private TextureBindingLayout _Texture;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.Texture" />
    public TextureBindingLayout Texture
    {
        get => _Texture;

        set
        {
            // Dispose existing
            _Texture?.Dispose();
            
            // Store managed version
            _Texture = value;

            // Set within chain.
            if (value != null)
                Native->Texture = value.Get();
            else Native->Texture = default;
        }
    }
 
    // Keep the pointer alive :D
    private StorageTextureBindingLayout _StorageTexture;

    /// <seealso cref="Silk.NET.WebGPU.BindGroupLayoutEntry.StorageTexture" />
    public StorageTextureBindingLayout StorageTexture
    {
        get => _StorageTexture;

        set
        {
            // Dispose existing
            _StorageTexture?.Dispose();
            
            // Store managed version
            _StorageTexture = value;

            // Set within chain.
            if (value != null)
                Native->StorageTexture = value.Get();
            else Native->StorageTexture = default;
        }
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"BindGroupLayoutEntry {{
    Binding = ""{Binding}""
    Visibility = ""{Visibility}""
    Buffer = ""{Buffer}""
    Sampler = ""{Sampler}""
    Texture = ""{Texture}""
    StorageTexture = ""{StorageTexture}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        if (disposing)
        {
            _Buffer?.Dispose();
            _Buffer = null;
            _Sampler?.Dispose();
            _Sampler = null;
            _Texture?.Dispose();
            _Texture = null;
            _StorageTexture?.Dispose();
            _StorageTexture = null;
        }

        base.Dispose(disposing);
    }
}
