// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.StorageTextureBindingLayout"/>
public sealed unsafe class StorageTextureBindingLayout : ChainedStruct<Silk.NET.WebGPU.StorageTextureBindingLayout>
{
    public static implicit operator Silk.NET.WebGPU.StorageTextureBindingLayout(StorageTextureBindingLayout managed)
        => managed != null ? managed.Get() : default;

    public static implicit operator Span<Silk.NET.WebGPU.StorageTextureBindingLayout>(StorageTextureBindingLayout managed)
        => managed != null ? managed.GetRef() : default;

    /// <seealso cref="Silk.NET.WebGPU.StorageTextureBindingLayout.Access" />
    public Silk.NET.WebGPU.StorageTextureAccess Access
    {
        get => Native->Access;
        set => Native->Access = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.StorageTextureBindingLayout.Format" />
    public Silk.NET.WebGPU.TextureFormat Format
    {
        get => Native->Format;
        set => Native->Format = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.StorageTextureBindingLayout.ViewDimension" />
    public Silk.NET.WebGPU.TextureViewDimension ViewDimension
    {
        get => Native->ViewDimension;
        set => Native->ViewDimension = value;
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"StorageTextureBindingLayout {{
    Access = ""{Access}""
    Format = ""{Format}""
    ViewDimension = ""{ViewDimension}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        base.Dispose(disposing);
    }
}
