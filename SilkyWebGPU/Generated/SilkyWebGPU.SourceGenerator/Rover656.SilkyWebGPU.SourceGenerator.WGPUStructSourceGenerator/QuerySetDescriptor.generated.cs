// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

/// <seealso cref="Silk.NET.WebGPU.QuerySetDescriptor"/>
public sealed unsafe class QuerySetDescriptor : ChainedStruct<Silk.NET.WebGPU.QuerySetDescriptor>
{
    public static implicit operator Silk.NET.WebGPU.QuerySetDescriptor(QuerySetDescriptor managed)
        => managed != null ? managed.Get() : default;

    public static implicit operator Span<Silk.NET.WebGPU.QuerySetDescriptor>(QuerySetDescriptor managed)
        => managed != null ? managed.GetRef() : default;

    /// <seealso cref="Silk.NET.WebGPU.QuerySetDescriptor.Label" />
    public string Label
    {
        get => SilkMarshal.PtrToString((nint) Native->Label);
        set
        {
           if (Native->Label != null)
               SilkMarshal.Free((nint) Native->Label);
           Native->Label = (byte *) SilkMarshal.StringToPtr(value);
        }
    }
 
    /// <seealso cref="Silk.NET.WebGPU.QuerySetDescriptor.Type" />
    public Silk.NET.WebGPU.QueryType Type
    {
        get => Native->Type;
        set => Native->Type = value;
    }
 
    /// <seealso cref="Silk.NET.WebGPU.QuerySetDescriptor.Count" />
    public uint Count
    {
        get => Native->Count;
        set => Native->Count = value;
    }
 
    // Keep a copy around for disposal.
    private NativeArray<Silk.NET.WebGPU.PipelineStatisticName> _PipelineStatistics;

    /// <seealso cref="Silk.NET.WebGPU.QuerySetDescriptor.PipelineStatistics" />
    /// <remarks>
    /// TODO: Write this remark.
    /// Summary: Will update if you modify the existing pointer, but if you replace it, it won't.
    /// </remarks>
    public NativeArray<Silk.NET.WebGPU.PipelineStatisticName> PipelineStatistics
    {
        // Return a readonly weak copy.
        get => new NativeArray<Silk.NET.WebGPU.PipelineStatisticName>((int) Native->PipelineStatisticsCount, Native->PipelineStatistics);

        set
        {
            // Dispose any existing object.
            _PipelineStatistics?.Dispose();

            // Set array
            if (value != null)
            {
                Native->PipelineStatistics = value.Ptr;
                Native->PipelineStatisticsCount = (UInt32) value.Count;
            }
            else
            {
                Native->PipelineStatistics = null;
                Native->PipelineStatisticsCount = 0;
            }

            // Save for later disposal
            _PipelineStatistics = value;
        }
    }
 
    public override string ToString()
    {
        // Write anything to the console we deem writable. This might not be accurate but its good enough for debug purposes :)
        return $@"QuerySetDescriptor {{
    Label = ""{Label}""
    Type = ""{Type}""
    Count = ""{Count}""
}}";
    }

    protected override void Dispose(bool disposing)
    {
        if (Disposed) return;
        if (disposing)
        {
            _PipelineStatistics?.Dispose();
            _PipelineStatistics = null;
        }

        SilkMarshal.Free((nint) Native->Label);
        Native->Label = null;
        base.Dispose(disposing);
    }
}
