// <auto-generated/>

using Rover656.SilkyWebGPU;
using Rover656.SilkyWebGPU.Native;
using Rover656.SilkyWebGPU.Native.Chain;

using Silk.NET.Core.Native;
using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace Rover656.SilkyWebGPU;

public sealed class TEMPSamplerDescriptor : WrappedStruct<Silk.NET.WebGPU.SamplerDescriptor>
{
    public unsafe byte* Label
    {
        get => Native.Label;
        set => Native.Label = value;
    }

    public Silk.NET.WebGPU.AddressMode AddressModeU
    {
        get => Native.AddressModeU;
        set => Native.AddressModeU = value;
    }

    public Silk.NET.WebGPU.AddressMode AddressModeV
    {
        get => Native.AddressModeV;
        set => Native.AddressModeV = value;
    }

    public Silk.NET.WebGPU.AddressMode AddressModeW
    {
        get => Native.AddressModeW;
        set => Native.AddressModeW = value;
    }

    public Silk.NET.WebGPU.FilterMode MagFilter
    {
        get => Native.MagFilter;
        set => Native.MagFilter = value;
    }

    public Silk.NET.WebGPU.FilterMode MinFilter
    {
        get => Native.MinFilter;
        set => Native.MinFilter = value;
    }

    public Silk.NET.WebGPU.MipmapFilterMode MipmapFilter
    {
        get => Native.MipmapFilter;
        set => Native.MipmapFilter = value;
    }

    public float LodMinClamp
    {
        get => Native.LodMinClamp;
        set => Native.LodMinClamp = value;
    }

    public float LodMaxClamp
    {
        get => Native.LodMaxClamp;
        set => Native.LodMaxClamp = value;
    }

    public Silk.NET.WebGPU.CompareFunction Compare
    {
        get => Native.Compare;
        set => Native.Compare = value;
    }

    public ushort MaxAnisotropy
    {
        get => Native.MaxAnisotropy;
        set => Native.MaxAnisotropy = value;
    }
}