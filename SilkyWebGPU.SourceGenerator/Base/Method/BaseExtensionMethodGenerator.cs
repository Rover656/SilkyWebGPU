using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Rover656.SilkyWebGPU.BaseSourceGenerator.Method;

// Funky namespace because we're going to share this file.
namespace Rover656.SilkyWebGPU.BaseSourceGenerator.Base;

public class BaseExtensionMethodGenerator : ISourceGenerator
{
    private static string _referenceClass;
    private static string _extensionNs;
    private static string _apiHandle;

    public BaseExtensionMethodGenerator(string referenceClass, string extensionNamespace, string apiHandle)
    {
        _referenceClass = referenceClass;
        _extensionNs = extensionNamespace;
        _apiHandle = apiHandle;
    }

    public void Execute(GeneratorExecutionContext context)
    {
        // Get reference class
        var referenceClass = context.Compilation.GetTypeByMetadataName(_referenceClass);
            
        // Return if its not found
        if (referenceClass == null)
            return;
            
        // Collect methods for generation
        var methodsDefinitions = new List<MethodDefinition>();
        foreach (var classMember in referenceClass.GetMembers())
        {
            if (classMember is IMethodSymbol classMethod)
            {
                ProcessMethod(classMethod, ref methodsDefinitions);
            }
        }

        // Write output source
        var outputWriter = new StringBuilder($@"// <auto-generated/>
using {GlobalConstants.ProjectNS};
using {GlobalConstants.ProjectNS}.Native;
using {GlobalConstants.ProjectNS}.Native.Chain;

using Silk.NET.WebGPU;
using Silk.NET.WebGPU.Extensions.WGPU;

namespace {_extensionNs};

public static partial class MethodExtensions
{{");
        
        foreach (var method in methodsDefinitions)
        {
            outputWriter.AppendLine($@"
    public static unsafe {method.ReturnType} {method.Name}{method.TypeParameterDecl}(this {GlobalConstants.NativePtrType}<{method.Owner.Type}> {method.Owner.ParameterName}{method.ParameterDecl}) {method.ConstraintDecl}
    {{
        if ({method.Owner.ParameterName}.IsNull()) throw new NullReferenceException();
        {method.GetMethodCall(_apiHandle)}
    }}");
        }
            
        outputWriter.Append('}');

        context.AddSource($"MethodExtensions.generated.cs", outputWriter.ToString());
            
    }

    private void ProcessMethod(IMethodSymbol classMethod, ref List<MethodDefinition> methodDefinitions)
    {
        // Ignore parameterless methods
        if (classMethod.Parameters.Length <= 0)
            return;
            
        // Get the owner of this method
        if (!GetObjectOwner(classMethod, out var ownerDefinition))
            return;

        // Check for method exclusion.
        if (ExcludeMethod(classMethod))
            return;
            
        // Collect basic information (that does not change between variants)
        var baseDefinition = new MethodDefinition
        {
            ReturnType = new MethodReturnType(classMethod),
            Owner = ownerDefinition,
            Name = classMethod.Name.Replace(ownerDefinition.Name, ""),
            OriginalName = classMethod.Name,
            Parameters = DefineParameters(classMethod),
            TypeParameters = DefineTypeParameters(classMethod),
        };
            
        // Add default extension method definition
        methodDefinitions.Add(baseDefinition);
            
        // TODO: Generate variants without ref T0's.
    }

    private static bool GetObjectOwner(IMethodSymbol method, out ManagedOwnerDefinition ownerDefinition)
    {
        // Default
        ownerDefinition = default;
            
        // We only expand methods that are owned by object's we recognize
        var objectParameter = method.Parameters[0];
        if (objectParameter.Type is not IPointerTypeSymbol objectPointer)
            return false;
            
        // Get object type
        var objectType = objectPointer.PointedAtType;
            
        // If we don't recognize this type, ignore it
        if (!GlobalConstants.Objects.Contains(objectType.Name))
            return false;
            
        // We have a match
        ownerDefinition = new ManagedOwnerDefinition
        {
            Name = objectType.Name,
            Type = objectType.ToString(),
            ParameterName = objectParameter.Name,
        };
        return true;
    }

    private static List<MethodParameterDefinition> DefineParameters(IMethodSymbol method)
    {
        var parameters = new List<MethodParameterDefinition>(method.Parameters.Length - 1);
        for (var i = 1; i < method.Parameters.Length; i++)
        {
            parameters.Add(new MethodParameterDefinition(method.Parameters[i]));
        }
        return parameters;
    }

    private static List<TypeParameterDefinition> DefineTypeParameters(IMethodSymbol method)
    {
        var parameters = new List<TypeParameterDefinition>(method.TypeParameters.Length);
        for (var i = 0; i < method.TypeParameters.Length; i++)
        {
            parameters.Add(new TypeParameterDefinition(method.TypeParameters[i]));
        }
        return parameters;
    }

    private static bool ExcludeMethod(IMethodSymbol method)
    {
        for (var i = 1; i < method.Parameters.Length; i++)
        {
            // Get parameter
            var parameter = method.Parameters[i];
                
            // We disallow ref pointers.
            if (parameter.Type is IPointerTypeSymbol pointerParameter)
            {
                if (parameter.RefKind == RefKind.Ref)
                {
                    // We don't deal with ref pointers, these are arrays and handled another way.
                    return true;
                }

                if (pointerParameter.PointedAtType is IPointerTypeSymbol arrayType)
                {
                    // TODO: These arrays need the count parameter removed and redirected too.
                    if (!GlobalConstants.Objects.Contains(arrayType.PointedAtType.Name))
                    {
                        // We don't deal with unknown array types.
                        return true;
                    }
                }
            }
        }

        return false;
    }

    public void Initialize(GeneratorInitializationContext context)
    {
    }
}
